BEGIN; -- Début d'une transaction : si l'une des commandes est amenée à échouer, alors toutes les commandes, mêmes déjà passées, échoueront. 

-- Suppression des tables existantes avant re-création
-- On utilise `CASCADE` pour pouvoir supprimer les tables meme si elles sont référencées par d'autres tables
DROP TABLE IF EXISTS "coffee_category", "coffee", "category", "country" CASCADE; 

-- Table category
CREATE TABLE "category" (
    "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" TEXT UNIQUE NOT NULL,

    -- created_at et updated_at sont des champs techniques pour connaître la date de création et de mise à jour d'un enregistrement
    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ
);

-- Table country
CREATE TABLE "country" (
    "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" TEXT UNIQUE NOT NULL,

    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ
);

-- Table coffee
CREATE TABLE "coffee" (
    "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" TEXT NOT NULL,
    "description" TEXT,
    "reference" CHAR(9) UNIQUE NOT NULL,
    "country_id" INTEGER NOT NULL REFERENCES country(id),
    "price_per_kg" DECIMAL NOT NULL,
    "available" BOOLEAN NOT NULL DEFAULT false,

    "created_at" TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    "updated_at" TIMESTAMPTZ
);

-- Table coffee_category (table de jointure entre coffee et category)
CREATE TABLE "coffee_category" (
    "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "coffee_id" INTEGER NOT NULL REFERENCES coffee(id),
    "category_id" INTEGER NOT NULL REFERENCES category(id)
);

COMMIT; -- Fin de la transaction
